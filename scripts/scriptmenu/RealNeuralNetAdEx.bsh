import java.awt.geom.Point2D;
import java.util.*;
import java.io.*;
import org.simbrain.network.NetworkComponent;
import org.simbrain.network.connections.*;
import org.simbrain.network.core.*;
import org.simbrain.network.core.NeuronUpdateRule.InputType;
import org.simbrain.network.groups.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.networks.*;
import org.simbrain.network.neurons.*;
import org.simbrain.network.neuron_update_rules.*;
import org.simbrain.network.synapse_update_rules.*;
import org.simbrain.network.synapse_update_rules.spikeresponders.*;
import org.simbrain.network.update_actions.*;
import org.simbrain.util.randomizer.*;
import org.simbrain.util.SimbrainConstants.Polarity;
import org.simbrain.util.math.*;
import org.simbrain.workspace.*;

/**
 * 
 * @author Zach Tosi
 *
 * Takes a functional connectivity matrix of an organotypic culture of rat 
 * somatosensory cortex derived using transfer entropy and makes it the 
 * (scaled) weight matrix for a network of AdEx neurons. Each AdEx neuron
 * has some of its parameters altered based on the mean firing rate of the
 * corresponding neuron in the actual data to make the network dynamics more
 * realistic. Some random sample of high firing rate neurons are assumed to be
 * inhibitory.
 *
 * TE analysis and data colleciton were performed by the lab of Dr. John Beggs,
 * University of Indiana Bloomington Department of Physics 
 *
 */
{
    // Parameters 
    final boolean USE_INHIB = true;
    final boolean STDP_ON = false;
    int NUM_NEURONS;
    int GRID_SPACE = 25;
    String DIR = "./scripts/scriptmenu/RealNeuralNetAdExResources/";
    List<Double> prefFiringRates = new ArrayList<Double>();
    List<Double> sorted = new ArrayList<Double>();
    Scanner scan = null;
    try {
        FileReader fr = new FileReader(DIR+"firingRates.csv");
        Scanner scan = new Scanner(fr);
        scan.useDelimiter(",|\\n");
        while (scan.hasNextDouble()) {
            double d = scan.nextDouble();
            prefFiringRates.add(d);
            sorted.add(d);
        }
        scan.close();
    } catch (IOException ie) {
        ie.printStackTrace();
    } finally {
        if (scan != null) {
            scan.close();
        }
    }
    NUM_NEURONS = prefFiringRates.size();

    Collections.sort(sorted);
    Collections.reverse(sorted);
    double inhibThreshold = sorted.get((int)(0.2 * sorted.size()));

    // Build Network
    NetworkComponent networkComponent = new NetworkComponent("Network");
    workspace.addWorkspaceComponent(networkComponent);
    Network network = networkComponent.getNetwork();
    network.setTimeStep(0.1);
    GridLayout layout = new GridLayout(GRID_SPACE, GRID_SPACE, (int) Math.sqrt(NUM_NEURONS));
    layout.setInitialLocation(new Point(10, 10));
    GridLayout layout2 = new GridLayout(GRID_SPACE, GRID_SPACE, (int) Math.sqrt(NUM_NEURONS));
    layout2.setInitialLocation(new Point(NUM_NEURONS * 100, 10));
    List<Neuron> neurons = new ArrayList<Neuron>(NUM_NEURONS);
    List<Neuron> outNeurons = new ArrayList<Neuron>(NUM_NEURONS);

    Randomizer rand = new Randomizer();
    rand.setPdf(ProbDistribution.NORMAL);
    rand.setParam1(0);
    rand.setParam2(200);
    Random randi = new Random();
    for (int i = 0; i < NUM_NEURONS; i++) {
        Neuron neuron = new Neuron(network);
        neurons.add(neuron);
        AdExIFRule lif = new AdExIFRule();
        lif.setI_bg(.5);
        double pf = prefFiringRates.get(i);
        double thresh;
        if (prefFiringRates.get(i) > 2) {
        	thresh = (20 / (1 + Math.exp((2-pf)/5))) - 10;    	
        }  else {
        	thresh = (6 / (1 + Math.exp((pf-2)/(-3)))) - 3;
        }
        lif.setV_Th(-50.4 - thresh);
        lif.setV_Reset(-47.7);
        lif.setA(4);
        lif.setTauW(200);
        lif.setB(0.175); 
        lif.setG_e_bar(1.3 * Math.exp(-prefFiringRates.get(i)/15) + 10);
        lif.setMemCapacitance(2000/Math.sqrt(pf/2));
        if (prefFiringRates.get(i) > inhibThreshold && USE_INHIB && Math.random() < 0.66) {
        	neuron.setPolarity(Polarity.INHIBITORY);
        } else {
        	neuron.setPolarity(Polarity.EXCITATORY);
        }
        lif.setAddNoise(true);
        lif.setNoiseGenerator(rand);
        neuron.setUpdateRule(lif);
        Neuron outNeuron = new Neuron(network);
        outNeuron.getUpdateRule().setInputType(InputType.SYNAPTIC);
        ((LinearRule) outNeuron.getUpdateRule()).setClipped(false);
        outNeurons.add(outNeuron);
    }
    NeuronGroup ng1 = new NeuronGroup(network, neurons);
    ng1.setLabel("AdExIF Network " + new Date().toString() + " ");

    // Set neuron coordinates for connection...
    ng1.setXYZCoordinatesFromFile(DIR+"xyCoors.csv");

    NeuronGroup outs = new NeuronGroup(network, outNeurons);
    outs.setLabel("Spike Visualizer");

    network.addGroup(ng1);
    network.addGroup(outs);
    
	SynapseGroup sg = new SynapseGroup(ng1, ng1);
    Scanner wtSc = null;
    try {
        wtSc = new Scanner(new File(DIR+"weightMat.csv"));
        int i = 0;
        int j;
        Scanner lineScan = null;
        try {
                while (wtSc.hasNextLine()) {
                    lineScan = new Scanner(wtSc.nextLine());
                    lineScan.useDelimiter(",|\\n");
                    j = 0;
                    while (lineScan.hasNext()) {
                        String next = lineScan.next();
                        //System.out.println(next);
                        double val = Double.parseDouble(next);
                        if (val > 0) {
                            Neuron src = ng1.getNeuronList().get(i);
                            val = src.getPolarity().value(3200000 * val);
                            Neuron tar = ng1.getNeuronList().get(j);
                            sg.addSynapseUnsafe(new Synapse(src, tar, val));
                        }
                        j++;
                    }
                    i++;
                    lineScan.close();
                }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (lineScan != null) {
                lineScan.close();
            }
        }
    } catch (IOException ie) {
        ie.printStackTrace();
    } finally {
        if (wtSc != null) {
            wtSc.close();
        }
    }
    sg.setUpperBound(1000000, Polarity.EXCITATORY);
    sg.setLowerBound(0, Polarity.EXCITATORY);
    sg.setLowerBound(-1000000, Polarity.INHIBITORY);
    sg.setUpperBound(0, Polarity.INHIBITORY);
    for (Neuron n : ng1.getNeuronList()) {
        for (Synapse s : n.getFanOutList()) {
            s.setStrength(n.getPolarity().value(s.getStrength()));
        }
    }
    UDF spkr = new UDF();
    spkr.setPSRDecayTimeConstant(5);
	sg.setSpikeResponder(spkr, Polarity.BOTH);
	sg.setLabel("Recurrent Synapses");
    final double LOG_2 = Math.log(2);
	for (Synapse s : sg.getAllSynapses()) {
		double dist = Network.getEuclideanDist(s.getSource(), s.getTarget());
        dist *= dist;
        int delay = (int) Math.ceil((Math.log(dist + 1) / LOG_2));
        delay = (int) Math.ceil(delay * (0.2 / network.getTimeStep()));
	   s.setDelay(delay);
	}
    if (STDP_ON) {
    	LogSTDPRule stdp = new LogSTDPRule();
    	stdp.setLearningRate(0.00005);
    	stdp.setTau_minus(34);
    	stdp.setTau_plus(17);
    	sg.setLearningRule(stdp, Polarity.INHIBITORY);
    	LogSTDPRule stdp2 = new LogSTDPRule();
    	stdp2.setLearningRate(0.00005);
    	stdp2.setTau_minus(34);
    	stdp2.setTau_plus(17);
    	sg.setLearningRule(stdp2, Polarity.EXCITATORY);
    }
	network.addGroup(sg);

	SynapseGroup outCon = SynapseGroup.createSynapseGroup(ng1, outs, new OneToOne());
	outCon.setSpikeResponder(new ConvolvedJumpAndDecay(), Polarity.BOTH);
	outCon.setLabel("One to One Connections");
	network.addGroup(outCon);
	for (Neuron n : outs.getNeuronList()) {
		n.setUpperBound(3);
    		if (n.getFanIn().get(0).getStrength() < 0) {
    			((LinearRule) n.getUpdateRule()).setSlope(-1);
    		}
    }

    //ng1.setLayout(layout);
    //ng1.applyLayout(new Point2D.Double(0.0 ,0.0));
    outs.setLayout(layout2);
    outs.applyLayout(new Point2D.Double(1500.0, 0.0));
    print(sg.size());
    
    network.randomizeNeurons();
    network.fireSynapsesUpdated();
    network.getUpdateManager().clear();
    network.getUpdateManager().addAction(ConcurrentBufferedUpdate.createConcurrentBufferedUpdate(network));
    network.updateTimeType();
}
