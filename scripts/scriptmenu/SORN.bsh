import java.awt.geom.Point2D;
import java.util.*;
import org.simbrain.network.NetworkComponent;
import org.simbrain.network.connections.*;
import org.simbrain.network.core.*;
import org.simbrain.network.core.NeuronUpdateRule.InputType;
import org.simbrain.network.groups.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.networks.*;
import org.simbrain.network.neurons.*;
import org.simbrain.network.neuron_update_rules.*;
import org.simbrain.network.synapse_update_rules.*;
import org.simbrain.network.synapse_update_rules.spikeresponders.*;
import org.simbrain.network.update_actions.*;
import org.simbrain.util.randomizer.*;
import org.simbrain.util.SimbrainConstants.Polarity;
import org.simbrain.util.math.*;
import org.simbrain.workspace.*;

/**
 * 
 * Creates a SORN: Self-Organizing Recurrent Network as described in:
 * Lazar, Pipa, & Triesch 2009. Inhibitory and excitatory neurons are 
 * split into different groups here, so the reservoir is comprised of
 * two separate neuron groups. This is to allow for better control over
 * how excitatory and inhibitory neurons are connected. Inputs are 
 * Poisson distributed spike trains in this demo. 
 * 
 * The hallmark of the SORN model are the 3 forms of plasticity 
 * including neuronal homeostatic plasticity, spike-timing dependent 
 * plasticity, and synaptic normalization.
 * 
 * Note that this model uses custom classes in the SORN directory.   
 * Compiled classes provide better performance.   To implement something similar
 * yourself you can use the SORN directory and its files as a template. 
 * Compile the java classes directly in the sorn directory, and then refer
 * to them using the call to "addClassPath" below.
 *
 * The custom classes in the SORN directory extend an existing neuron
 * rule (SpikingThreshold) and synapse update rule (STDP).
 * 
 */
{

    int NUM_NEURONS = 2500; // 1024
    int GRID_SPACE = 25;
    int RADIUS = 400; // 100
    int EE_KIN = 25; // 10
    int IE_KIN = (int)(0.2 * NUM_NEURONS)/10;
    int EI_KIN = NUM_NEURONS/50;

    // Add custom classes to classpath
    String FS = System.getProperty("file.separator");
    addClassPath("scripts" + FS + "scriptmenu" + FS + "SORN" );

    // Build Network
    NetworkComponent networkComponent = new NetworkComponent("Network");
    workspace.addWorkspaceComponent(networkComponent);
    Network network = networkComponent.getNetwork();
    network.setTimeStep(1.0);

    ArrayList<Neuron> neurons = new ArrayList<Neuron>();
    ArrayList<Neuron> inhibitoryNeurons = new ArrayList<Neuron>();
    SORNNeuronRule sornRule = new SORNNeuronRule();
    sornRule.sethIP(400.0/NUM_NEURONS);
    for (int i = 0; i < NUM_NEURONS; i++) {
    	   Neuron n = new Neuron(network);
        sornRule.setMaxThreshold(0.5);
        sornRule.setThreshold(0.5 * Math.random() + 0.01);
        sornRule.setRefractoryPeriod(1);
        sornRule.setAddNoise(true);
    	   n.setPolarity(Polarity.EXCITATORY);
        n.setUpdateRule(sornRule.deepCopy());
	   neurons.add(n);
    }
	SORNNeuronRule str = new SORNNeuronRule();
    for (int i = 0; i < (int) (NUM_NEURONS * 0.2); i++) {
        Neuron n = new Neuron(network);
        str.setThreshold(0.8 * Math.random() + 0.01);
        str.setEtaIP(0); // No Homeostatic Plasticity
        str.setRefractoryPeriod(1);
        str.setAddNoise(true);
        n.setPolarity(Polarity.INHIBITORY);
        n.setUpdateRule(str.deepCopy());
        inhibitoryNeurons.add(n);
    }

	NeuronGroup ng = new NeuronGroup(network, neurons);
	GridLayout layout = new GridLayout(GRID_SPACE, GRID_SPACE, (int) Math.sqrt(NUM_NEURONS));
    ng.setLabel("Excitatory");
    network.addGroup(ng);
    ng.setLayout(layout);
    ng.applyLayout(new Point(10, 10));

    NeuronGroup ngIn = new NeuronGroup(network, inhibitoryNeurons);
    layout = new GridLayout(GRID_SPACE, GRID_SPACE, (int) Math.sqrt(0.2 * NUM_NEURONS));
    ngIn.setLabel("Inhibitory");
    network.addGroup(ngIn);
    ngIn.setLayout(layout);
    System.out.println(ngIn.size());
    int x_loc = (int) (Math.sqrt(NUM_NEURONS) * GRID_SPACE + 300);
    ngIn.applyLayout(new Point(x_loc, 10));

    PolarizedRandomizer exRand = new PolarizedRandomizer(Polarity.EXCITATORY,
		ProbDistribution.UNIFORM);
	PolarizedRandomizer inRand = new PolarizedRandomizer(Polarity.INHIBITORY,
		ProbDistribution.UNIFORM);
	exRand.setParam1(0);
	exRand.setParam2(1);
	inRand.setParam1(0);	
	inRand.setParam2(1);

    RadialSimpleConstrainedKIn ee_con = new RadialSimpleConstrainedKIn(EE_KIN, RADIUS);
    SynapseGroup sg_ee = SynapseGroup.createSynapseGroup(ng, ng, ee_con, 1.0, exRand, inRand);
    sg_ee.setLabel("EE Synapses");
    sg_ee.setSpikeResponder(new Step(), Polarity.BOTH);
    network.addGroup(sg_ee);

    RadialSimpleConstrainedKIn ie_con = new RadialSimpleConstrainedKIn(IE_KIN, 100000);
    SynapseGroup sg_ie = SynapseGroup.createSynapseGroup(ngIn, ng, ie_con, 1.0, exRand, inRand);
    sg_ie.setLabel("IE Synapses");
    sg_ie.setSpikeResponder(new Step(), Polarity.BOTH);
    network.addGroup(sg_ie);

    RadialSimpleConstrainedKIn ei_con = new RadialSimpleConstrainedKIn(EI_KIN, 100000);
    SynapseGroup sg_ei = SynapseGroup.createSynapseGroup(ng, ngIn, ei_con, 1.0, exRand, inRand);
    sg_ei.setLabel("EI Synapses");
    sg_ei.setSpikeResponder(new Step(), Polarity.BOTH);
    network.addGroup(sg_ei);

	for (Neuron n : neurons) {
		((SORNNeuronRule) n.getUpdateRule()).init(n);
	}

	AddSTDPRule stdp = new AddSTDPRule();
	stdp.setLearningRate(0.001);
	sg_ee.setLearningRule(stdp, Polarity.BOTH);

    ArrayList<Neuron> inNeurons = new ArrayList<Neuron>();
    for (int i = 0; i < 200; i++) {
        Neuron n = new Neuron(network);
        //SpikingThresholdRule inRule = new SpikingThresholdRule();
        //inRule.setThreshold(0.96);
        sornRule.setMaxThreshold(0.5);
        sornRule.setThreshold(0.5 * Math.random() + 0.01);
    	   n.setPolarity(Polarity.EXCITATORY);
        n.setUpdateRule(sornRule.deepCopy());
        inNeurons.add(n);
    }
    NeuronGroup input = new NeuronGroup(network, inNeurons);
    layout = new GridLayout(GRID_SPACE, GRID_SPACE, (int) Math.sqrt(0.4 * NUM_NEURONS));
    input.setLabel("Input");
    network.addGroup(input);
    input.setLayout(layout);
    // Todo; get current location of ng above
    int y_loc = (int) (Math.sqrt(NUM_NEURONS) * GRID_SPACE + 200);
    input.applyLayout(new Point(x_loc, y_loc));

    Sparse input_ee_con = new Sparse(0.05, false, false);
    SynapseGroup input_ee = SynapseGroup.createSynapseGroup(input, ng, input_ee_con, 1.0, exRand, inRand);
    input_ee.setLabel("Input -> Excitatory");
    input_ee.setLearningRule(stdp, Polarity.BOTH);
    input_ee.setSpikeResponder(new Step(), Polarity.BOTH);
    network.addGroup(input_ee);

    Sparse ee_input_con = new Sparse(0.01, false, false);
    SynapseGroup ee_input = SynapseGroup.createSynapseGroup(ng, input, ee_input_con, 1.0, exRand, inRand);
    ee_input.setLabel("Excitatory -> Input");
    ee_input.setLearningRule(stdp, Polarity.BOTH);
    ee_input.setSpikeResponder(new Step(), Polarity.BOTH);
    network.addGroup(ee_input);

    Sparse input_ie_con = new Sparse(0.01, true, false);
    SynapseGroup input_ie = SynapseGroup.createSynapseGroup(input, ngIn, input_ie_con, 1.0, exRand, inRand);
    input_ie.setLabel("Input -> Inhibitory");
    input_ie.setSpikeResponder(new Step(), Polarity.BOTH);
    network.addGroup(input_ie);

    Sparse ie_input_con = new Sparse(0.01, true, false);
    SynapseGroup ie_input = SynapseGroup.createSynapseGroup(ngIn, input, input_ie_con, 1.0, exRand, inRand);
    ie_input.setLabel("Inhibitory -> Input");
    ie_input.setSpikeResponder(new Step(), Polarity.BOTH);
    network.addGroup(ie_input);


	for (Neuron n : neurons) {
		n.normalizeInhibitoryFanIn();
	}
	for (Neuron n : inhibitoryNeurons) {
		n.normalizeExcitatoryFanIn();
	}

	for (Neuron n : input.getNeuronList()) {
		n.normalizeInhibitoryFanIn();
		n.normalizeExcitatoryFanIn();
	}
    
    network.getUpdateManager().clear();
    network.getUpdateManager().addAction(ConcurrentBufferedUpdate.createConcurrentBufferedUpdate(network));
    network.updateTimeType();

}
